<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ending The Alphabet</title>
    <link>pcvonz.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 06 Aug 2017 23:12:05 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Examining Coordinate Spaces</title>
      <link>pcvonz.github.io/2017/08/06/math-primer-chapter-1/</link>
      <guid>pcvonz.github.io/2017/08/06/math-primer-chapter-1/</guid>
      <pubDate>Sun, 06 Aug 2017 18:42:35 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;2D-Space&quot;&gt;&lt;a href=&quot;#2D-Space&quot; class=&quot;headerlink&quot; title=&quot;2D Space&quot;&gt;&lt;/a&gt;2D Space&lt;/h2&gt;&lt;p&gt;2D Space is very simple and a lot of it you’ll
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="2D-Space"><a href="#2D-Space" class="headerlink" title="2D Space"></a>2D Space</h2><p>2D Space is very simple and a lot of it you’ll probably remember from grade school</p>
<h3 id="Standard-coordinate-system"><a href="#Standard-coordinate-system" class="headerlink" title="Standard coordinate system"></a>Standard coordinate system</h3><p>A standard coordinate system would have the <code>origin</code> at the center <img src="/images/math_primer_chapter_1/2d_standard.png" alt="standard"></p>
<h3 id="Screen-Space"><a href="#Screen-Space" class="headerlink" title="Screen Space"></a>Screen Space</h3><p>Most 2D game engines use “screen space”, which simply places the coordinate system at the upper left hand side of the screen. Like this:</p>
<p><img src="/images/math_primer_chapter_1/screen_space.png" alt="standard"></p>
<p>An interesting note about screen space: <code>y</code> actually points in the opposite<br>direction. If we needed to transform screen space into standard space, that is<br>actually pretty easy. Imagine rotating the page 180 degrees, that makes <code>y</code><br>point in the same direction. Now flip the page, that corrects <code>x</code>.  </p>
<p>This illustrates an interesting point about 2D spaces, they are all equal. No<br>matter which direction <code>x</code> and <code>y</code> point towards, it is trivial to transform<br>them so the spaces are equivalent. This is not the case with 3D spaces.</p>
<h2 id="3D-Space"><a href="#3D-Space" class="headerlink" title="3D Space"></a>3D Space</h2><p>Unlike 2D coordinate systems, 3D coordinate systems aren’t all equal. There are<br>two types of 3D coordinate systems: right and left handed.</p>
<h2 id="The-Relevant-Programs"><a href="#The-Relevant-Programs" class="headerlink" title="The Relevant Programs:"></a>The Relevant Programs:</h2><p>Blender &amp; Godot use a right handed coordinate space. However, Blender is z-up, and Godot is y-up. </p>
<p><img src="/images/math_primer_chapter_1/blender.png" alt="Blender"><br><img src="/images/math_primer_chapter_1/godot.png" alt="Godot"></p>
<p>If they used opposite coordinate spaces, they could transform the coordinate space in one of two ways:</p>
<ul>
<li>Flip one of the Axis</li>
<li>Exchange two axis</li>
</ul>
<p>However, since they are both right handed. All it takes is a small rotation to<br>move between y-up and z-up (which happens automatically of course)</p>
<h3 id="Sources"><a href="#Sources" class="headerlink" title="Sources:"></a>Sources:</h3><ul>
<li><em>3D Math Primer for Graphics and Game Development, 2nd Edition</em> Chapter 1</li>
</ul>
]]></content:encoded>
      
      <comments>pcvonz.github.io/2017/08/06/math-primer-chapter-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Matrix &amp; Vector Math</title>
      <link>pcvonz.github.io/2017/08/05/transforms/</link>
      <guid>pcvonz.github.io/2017/08/05/transforms/</guid>
      <pubDate>Sat, 05 Aug 2017 19:28:11 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Godot-engine&quot;&gt;&lt;a href=&quot;#Godot-engine&quot; class=&quot;headerlink&quot; title=&quot;Godot engine&quot;&gt;&lt;/a&gt;Godot engine&lt;/h2&gt;&lt;p&gt;Today I started learning about
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Godot-engine"><a href="#Godot-engine" class="headerlink" title="Godot engine"></a>Godot engine</h2><p>Today I started learning about transforms, matrices, and vectors. I’ll be using<br>a game engine I’m already familiar with to explore the practical applications<br>of this subject. Here is a link to the tutorial I’ll be referencing<br><a href="https://godot.readthedocs.io/en/stable/learning/features/math/matrices_and_transforms.html" target="_blank" rel="external">here</a>.</p>
<h2 id="2D-Transforms"><a href="#2D-Transforms" class="headerlink" title="2D Transforms"></a>2D Transforms</h2><p><code>Transform2D</code> is the 2D matrix class Godot uses. </p>
<figure class="highlight python"><figcaption><span>Matrix</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var m = Transfmorm2D()</div><div class="line">var x = m[<span class="number">0</span>] <span class="comment"># This is the X coordinate</span></div><div class="line">var y = m[<span class="number">1</span>] <span class="comment"># This is the Y coordinate</span></div><div class="line">var o = m[<span class="number">2</span>] <span class="comment"># This is the origin</span></div></pre></td></tr></table></figure>
<h2 id="What-is-an-identity-Matrix"><a href="#What-is-an-identity-Matrix" class="headerlink" title="What is an identity Matrix?"></a>What is an identity Matrix?</h2><p>It’s a matrix that aligns the transform to its parent coordinate system. By<br>default, Transform2D is created as an identity matrix. It’s an OCS that hasn’t<br>been translated, scaled, or rotated</p>
<ul>
<li>X = Vector2(1, 0)</li>
<li>y = Vector2(0, 1)</li>
<li>o = Vector2(0, 0)</li>
</ul>
<h2 id="Rotated"><a href="#Rotated" class="headerlink" title="Rotated"></a>Rotated</h2><p>Rotating a Transform2D is done by using the <code>rotated</code> function.</p>
<h2 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h2><p>You can translate an object in two ways. Locally by accessing <code>m[2]</code> (the<br>origin of the Matrix) or by by using <code>Transform2D.translated()</code>, which will<br>translate the object locally.</p>
<h2 id="Putting-it-to-use"><a href="#Putting-it-to-use" class="headerlink" title="Putting it to use:"></a>Putting it to use:</h2><h3 id="2D-Transform"><a href="#2D-Transform" class="headerlink" title="2D Transform"></a>2D Transform</h3><figure class="highlight python"><figcaption><span>2D Transform</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Globals</span></div><div class="line">var r = PI/<span class="number">24</span> <span class="comment"># Rotation</span></div><div class="line">var m = Transform2D() <span class="comment"># Transform 2D Matrix</span></div><div class="line"></div><div class="line"><span class="comment"># Process delta runs once every frame</span></div><div class="line">func _process(delta):</div><div class="line">  <span class="comment"># Getting the sprite</span></div><div class="line">  <span class="comment"># Get the transform of the sprite</span></div><div class="line">	var b = $Sprite.get_transform()</div><div class="line">  <span class="comment"># The vector from the mouse position to the sprite</span></div><div class="line">	var ba = get_viewport().get_mouse_position() - b.origin</div><div class="line">	<span class="keyword">if</span>(Input.is_action_pressed(<span class="string">'ui_left'</span>)):</div><div class="line">    <span class="comment"># Rotate the matrix by 32</span></div><div class="line">		m = m.rotated(r)</div><div class="line">    <span class="comment"># Set it to the position of the sprite</span></div><div class="line">		m[<span class="number">2</span>] = $Sprite.get_global_position()</div><div class="line">    <span class="comment"># Set the sprites transform to the new matrix</span></div><div class="line">		$Sprite.transform = m</div><div class="line">	<span class="keyword">if</span>(Input.is_action_pressed(<span class="string">'ui_right'</span>)):</div><div class="line">		m = m.rotated(-r)</div><div class="line">		m[<span class="number">2</span>] = $Sprite.get_global_position()</div><div class="line">		$Sprite.transform = m</div><div class="line">	<span class="keyword">if</span>(Input.is_action_pressed(<span class="string">'ui_up'</span>)):</div><div class="line">    <span class="comment"># Move the sprite along the Y axis of the sprite</span></div><div class="line">		$Sprite.transform[<span class="number">2</span>] -= $Sprite.transform[<span class="number">1</span>] * speed</div></pre></td></tr></table></figure>
<p><img src="/images/transforms/local_transform.gif" alt="Result of the local transform"></p>
<h3 id="2D-Siding"><a href="#2D-Siding" class="headerlink" title="2D Siding"></a>2D Siding</h3><p>2D siding can be used for things such as detecting when a player is in view of an npc:</p>
<figure class="highlight python"><figcaption><span>2D Siding</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">func _process(delta):</div><div class="line">  ...</div><div class="line">  <span class="comment"># Get the transform of the sprite</span></div><div class="line">	var b = $Sprite.get_transform()</div><div class="line">  <span class="comment"># Get the vector from the mouse to the sprite</span></div><div class="line">	var ba = get_viewport().get_mouse_position() - b.origin</div><div class="line">  <span class="comment"># You can tell when an object is in front of another object by dotting it</span></div><div class="line">  <span class="comment"># If the value is negative, that means that, in this case, the mouse is in front of the sprite.</span></div><div class="line">  <span class="comment"># If the value is positive, the opposite is true</span></div><div class="line">	<span class="keyword">if</span>(ba.dot(b[<span class="number">1</span>]) &lt; <span class="number">0</span>):</div><div class="line">		$Sprite/exclamation.show()</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		$Sprite/exclamation.hide()</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p><img src="/images/transforms/siding.gif" alt="Result of the 2D siding"></p>
<h3 id="Planes"><a href="#Planes" class="headerlink" title="Planes"></a>Planes</h3><figure class="highlight python"><figcaption><span>Planes</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">func _processs(delta):</div><div class="line">...</div><div class="line">  <span class="comment"># The normal vector</span></div><div class="line">	var N = plane.transform[<span class="number">1</span>]</div><div class="line">  <span class="comment"># Distance from the origin </span></div><div class="line">	var D = plane.transform[<span class="number">2</span>].distance_to(Vector2(plane.transform[<span class="number">2</span>].x, <span class="number">0</span>))</div><div class="line">  <span class="comment"># Plane was flipped, so I inverted N &amp; D</span></div><div class="line">	N = -N</div><div class="line">	D = -D</div><div class="line">  <span class="comment"># Get the distance from the Sprite to the plane</span></div><div class="line">	var distance = N.dot($Sprite.transform[<span class="number">2</span>]) - D</div><div class="line">	</div><div class="line">  <span class="comment"># Simple collision</span></div><div class="line">	<span class="keyword">if</span> (distance &gt; <span class="number">0</span>):</div><div class="line">		GRAV *= <span class="number">1.01</span></div><div class="line">		$Sprite.translate(Vector2(<span class="number">0</span>, GRAV))</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		GRAV = <span class="number">1.4</span></div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>The dot product can also be used to create <code>planes</code>. Planes have useful<br>properties, especially for collision detection. Constructing a plane is simple: take a unit normal<br>vector (which is perpendicular to a given surface) and dot it with a position in space.<br>This returns the <strong>absolute</strong> position of the object relative to the surface of the plane.<br>The plane then divides the world into a positive and negative space, making it easy to tell what side<br>of a line an object lies on. In this following example, I have used the plane<br>to make the sprite stop ‘falling’</p>
<p><img src="/images/transforms/plane.gif" alt="One example of a plane in action"></p>
<h3 id="3D-Transformation"><a href="#3D-Transformation" class="headerlink" title="3D Transformation"></a>3D Transformation</h3><figure class="highlight python"><figcaption><span>3D Transform</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Rotation used each the left or right arrow key is pressed</span></div><div class="line">var r = PI/<span class="number">32</span></div><div class="line">onready var m = $lowpoly.get_transform()</div><div class="line"><span class="comment"># _input only fires when someone sort of input is detected</span></div><div class="line">func _input(event):</div><div class="line">	<span class="keyword">if</span>(event.is_action_pressed(<span class="string">'ui_left'</span>)):</div><div class="line">    <span class="comment"># Rotating in 3D space needs a vector as reference</span></div><div class="line">    <span class="comment"># I use the Y vector here, which is the vector pointing up (Godot uses a</span></div><div class="line">    <span class="comment"># left handed coordinate sytem) m = m.rotated(Vector3(0, 1, 0), r) </span></div><div class="line">		m.origin = $lowpoly.get_global_transform().origin</div><div class="line">		$lowpoly.transform = m</div><div class="line">	<span class="keyword">if</span>(event.is_action_pressed(<span class="string">'ui_right'</span>)):</div><div class="line">		m = m.rotated(Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), -r)</div><div class="line">		m.origin = $lowpoly.get_global_transform().origin</div><div class="line">		$lowpoly.transform = m</div><div class="line">	<span class="keyword">if</span>(event.is_action_pressed(<span class="string">'ui_up'</span>)):</div><div class="line">		m = m.rotated(Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), -r)</div><div class="line">		m.origin = $lowpoly.get_global_transform().origin</div><div class="line">		$lowpoly.transform = m</div><div class="line">	</div><div class="line">func _process(delta):</div><div class="line">  <span class="comment"># Rotation and translations are separate (origin vs basis)</span></div><div class="line">  <span class="comment"># This line moves the mesh along the z axis (forward)</span></div><div class="line">	$lowpoly.transform.origin += $lowpoly.transform.basis[<span class="number">2</span>] * <span class="number">.2</span></div></pre></td></tr></table></figure>
<p><img src="/images/transforms/local_transform_3d.gif" alt="Moving a 3D object"></p>
<h2 id="Jargon"><a href="#Jargon" class="headerlink" title="Jargon"></a>Jargon</h2><ul>
<li>OCS: Oriented Coordinate System<ul>
<li>Origin: The transform applied to the coordinate system</li>
<li>Basis: The direction of X and Y in thne OCS from the new, transformed location</li>
</ul>
</li>
<li>normal<ul>
<li>Perpendicular vector off of a plane</li>
</ul>
</li>
</ul>
]]></content:encoded>
      
      <comments>pcvonz.github.io/2017/08/05/transforms/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Day 1</title>
      <link>pcvonz.github.io/2017/08/04/Day-1/</link>
      <guid>pcvonz.github.io/2017/08/04/Day-1/</guid>
      <pubDate>Fri, 04 Aug 2017 17:57:41 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Hello-WebGL&quot;&gt;&lt;a href=&quot;#Hello-WebGL&quot; class=&quot;headerlink&quot; title=&quot;Hello WebGL&quot;&gt;&lt;/a&gt;Hello WebGL&lt;/h2&gt;&lt;canvas width=&quot;500&quot; height=&quot;500&quot;&gt; &lt;/c
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Hello-WebGL"><a href="#Hello-WebGL" class="headerlink" title="Hello WebGL"></a>Hello WebGL</h2><canvas width="500" height="500"> </canvas>

<h3 id="Buffers"><a href="#Buffers" class="headerlink" title="Buffers"></a>Buffers</h3><p>Arrays of Binary data uploaded to the GPU. Can include the following: </p>
<ul>
<li>Positions</li>
<li>Normals</li>
<li>Texture Coordinates</li>
<li>Vertex Colors</li>
<li>Anythin you want really</li>
</ul>
<h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><p>Used to pull data out of buffers and use them in your vertex shaders. </p>
<h3 id="Uniforms"><a href="#Uniforms" class="headerlink" title="Uniforms"></a>Uniforms</h3><p>Global variables set before executing the shader</p>
<h3 id="Textures"><a href="#Textures" class="headerlink" title="Textures"></a>Textures</h3><p>Array of data you can randomly access via your shader prorgam. Usually image data.</p>
<h3 id="Varyings"><a href="#Varyings" class="headerlink" title="Varyings"></a>Varyings</h3><p>Way to pass vertex data to a fragment shader. </p>
<script src="/js/day_1.js"></script>
]]></content:encoded>
      
      <comments>pcvonz.github.io/2017/08/04/Day-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Challenge Day 1 - Hands</title>
      <link>pcvonz.github.io/2017/05/30/2017_may_challenge_1/</link>
      <guid>pcvonz.github.io/2017/05/30/2017_may_challenge_1/</guid>
      <pubDate>Wed, 31 May 2017 05:03:21 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;img src=&quot;/images/studies/2017_may_10_hand.png&quot; alt=&quot;Hands&quot;&gt;&lt;/p&gt;
&lt;p&gt;Studies from &lt;a href=&quot;https://www.amazon.com/Figure-Drawing-Invention
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="/images/studies/2017_may_10_hand.png" alt="Hands"></p>
<p>Studies from <a href="https://www.amazon.com/Figure-Drawing-Invention-Michael-Hampton/dp/0615272819/ref=sr_1_1?ie=UTF8&amp;qid=1494476930&amp;sr=8-1&amp;keywords=figure+drawing+design+and+invention" target="_blank" rel="external">Figure Drawing Design &amp; Invention</a>. I was also using some linework tips from an excellent video by <a href="https://www.youtube.com/watch?v=x0zl5NnEAyU" target="_blank" rel="external">Scott<br>Robertson</a>. It boils down to utilizing <a href="https://en.wikipedia.org/wiki/Aerial_perspective" target="_blank" rel="external">Aerial Perspective</a> &amp; “T” overlaps.</p>
]]></content:encoded>
      
      <comments>pcvonz.github.io/2017/05/30/2017_may_challenge_1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Challenge Day 2 - Rigorous Study</title>
      <link>pcvonz.github.io/2017/05/30/2017_may_challenge_2/</link>
      <guid>pcvonz.github.io/2017/05/30/2017_may_challenge_2/</guid>
      <pubDate>Wed, 31 May 2017 05:03:21 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://youtu.be/INHeI6Lwtes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scott Robertson’s&lt;/a&gt; video on improving draftsmanship &amp;amp; propor
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://youtu.be/INHeI6Lwtes" target="_blank" rel="external">Scott Robertson’s</a> video on improving draftsmanship &amp; proportional sensitivity surprised me. I didn’t think it would involve something like typography! I’ve been taking graphic design classes for two years now and the trend today (at least in my program) is that designers don’t <em>really</em> draw anymore. They may dabble but the projects Robertson talks about in this video are a far cry away from our actual assignments. We are completely absorbed in process, research, and taste. When a designer in my program needs an illustration or a photo, they more often than not just find one online. This video may have convinced me to dabble in typography again. </p>
<p><strong>Quote from the end of the video:</strong><br><em>We are what we repeatedly do. Excellence, then, is not an act, but a habit.”</em> -Aristotle</p>
]]></content:encoded>
      
      <comments>pcvonz.github.io/2017/05/30/2017_may_challenge_2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Challenge Day 3 - Color Planes of The Face</title>
      <link>pcvonz.github.io/2017/05/30/2017_may_challenge_3/</link>
      <guid>pcvonz.github.io/2017/05/30/2017_may_challenge_3/</guid>
      <pubDate>Wed, 31 May 2017 05:03:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Hue-Boomerang&quot;&gt;&lt;a href=&quot;#Hue-Boomerang&quot; class=&quot;headerlink&quot; title=&quot;Hue Boomerang&quot;&gt;&lt;/a&gt;Hue Boomerang&lt;/h2&gt;&lt;p&gt;Watched a video recommende
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Hue-Boomerang"><a href="#Hue-Boomerang" class="headerlink" title="Hue Boomerang"></a>Hue Boomerang</h2><p>Watched a video recommended by a friend from the Kienan Lefferty channel, <a href="https://www.youtube.com/watch?v=9DMND846yjU" target="_blank" rel="external">Shading Skin and You!</a>. He describes the hue shift of the face as a “hue boomerang”. The hue boomerang is as follows:</p>
<ul>
<li>The highlights are usually desaturated and warm.</li>
<li>The midtones are saturated and shifted up to a warmer value.</li>
<li>The shadows are desaturated and shifted toward purple. </li>
</ul>
<p>This general shape is described as the “Hue Boomerang”. This video reminded me of a post on James Gurney’s Blog, a post titled <a href="http://gurneyjourney.blogspot.com/2008/05/color-zones-of-face.html" target="_blank" rel="external">The Color Zones of The Face</a>. </p>
]]></content:encoded>
      
      <comments>pcvonz.github.io/2017/05/30/2017_may_challenge_3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Challenge Day 4 - Sculpting in Blender</title>
      <link>pcvonz.github.io/2017/05/30/2017_may_challenge_4/</link>
      <guid>pcvonz.github.io/2017/05/30/2017_may_challenge_4/</guid>
      <pubDate>Wed, 31 May 2017 05:03:21 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Blender-Sculpting&quot;&gt;&lt;a href=&quot;#Blender-Sculpting&quot; class=&quot;headerlink&quot; title=&quot;Blender Sculpting&quot;&gt;&lt;/a&gt;Blender Sculpting&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Blender-Sculpting"><a href="#Blender-Sculpting" class="headerlink" title="Blender Sculpting"></a>Blender Sculpting</h2><p><img src="/images/blender/sculpt.png" alt="Sculpting in Blender"></p>
<p>I’ve started learning blender again in order to finish a video for one of my<br>design classes. While using it I had the idea that sculpting<br>would be a fantastic way to learn anatomy. Here is the progress so far on<br>a sculpt I plan on finishing of Stuart Murdoch. More updates to come!</p>
]]></content:encoded>
      
      <comments>pcvonz.github.io/2017/05/30/2017_may_challenge_4/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
