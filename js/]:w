function initWebGL(selector) {
  const canvasDom = document.querySelector(selector)
  const gl= canvasDom.getContext('webgl')
  gl.clearColor(0, 0, 0, 1);
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
  gl.enable(gl.DEPTH_TEST);
  gl.viewport(0, 0, canvasDom.width, canvasDom.height)
  return gl
}

const gl = initWebGL('canvas')

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram()
  gl.attachShader(program, vertexShader)
  gl.attachShader(program, fragmentShader)
  gl.linkProgram(program)

  const success = gl.getProgramParameter(program, gl.LINK_STATUS)
  if (!success) {
    console.warn(gl.getProgramInfoLog(program))
    gl.deleteProgram(program)
  }
  return program
}

function createShader(gl, type, shaderSource) {
  const shader = gl.createShader(type)
  gl.shaderSource(shader, shaderSource)
  gl.compileShader(shader)

  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)
  if(!success) {
    console.warn(gl.getShaderInfoLog(shader))
    gl.deleteShader(shader)
  }
  return shader
}

const vertexShaderSrc = `
  attribute vec2 position;
  uniform vec3 resolution;
  uniform vec2 translation;
  uniform vec2 scaling;
  uniform float angle;
  void main() {
    float newX = (cos(angle) * position.x - sin(angle) * positin.y) * scaling.x;
    float newY = (sin(angle) * position.x + cos(angle) * position.y) * scaling.y;
    vec3 transformPosition = vec3(vec2(newX, newY) + translation, 0) / resolution * 2.0 - 1.0;
    gl_Position = vec4(transformPosition * vec3(1, -1, 1), 1);

  }
`

const fragmentShaderSrc = `
  precision mediump float;
  uniform vec4 v_color;

  void main() {
    gl_FragColor = v_color;
  }
`

let vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSrc)
let fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSrc)
const program = createProgram(gl, vertexShader, fragmentShader)
gl.useProgram(program)

const positionAttributeLocation = gl.getAttribLocation(program, 'position')
gl.enableVertexAttribArray(positionAttributeLocation)
const positionBuffer = gl.createBuffer()
gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)
gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0)

const resolutionUniformLocation = gl.getUniformLocation(program, 'resolution') // Getting data from our vertex shader
gl.uniform3f(resolutionUniformLocation, 500, 500, 500)
const colorUniformLocation = gl.getUniformLocation(program, 'v_color') // Getting data from our vertex shader
gl.uniform4f(colorUniformLocation, 1, .0, .4, .2)

const translationUniformLocation = gl.getUniformLocation(program, 'translation')

const pointList = [
  0, 0,
  250, 0,
  125, 250,
  250, 0,
  550, 0,
  500, 250,
];

gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(pointList), gl.STATIC_DRAW)

let counter = 0
function draw() {
  gl.clear(gl.COMPILE_STATUS | gl.DEPTH_BUFFER_BIT)
  gl.uniform2f(translationUniformLocation, counter % 400, 0)
  gl.drawArrays(gl.TRIANGLES, 0, pointList.length / 2)
  requestAnimationFrame(draw)
  counter++
}

requestAnimationFrame(draw)
